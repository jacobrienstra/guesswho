{"version":3,"sources":["serviceWorker.js","redux/types.ts","redux/reducers/settings.ts","redux/sdk.ts","redux/reducers/api.ts","redux/reducers/game.ts","redux/store.ts","components/NumberInput.react.tsx","components/Modal.react.tsx","components/Checkbox.react.tsx","components/Settings.react.tsx","components/Button.react.tsx","components/Input.react.tsx","components/FancySelect.react.tsx","components/CharacterCard.react.tsx","components/Setup.react.tsx","util.ts","components/DeckSelect.react.tsx","components/CardGrid.react.tsx","App.react.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Status","settingsSlice","createSlice","name","initialState","numCards","showName","reducers","setNumCards","state","action","payload","setShowName","actions","SDK","url","project","mode","cardsAdapter","createEntityAdapter","selectId","card","id","initialCardsState","getInitialState","status","unFetched","fetchCards","createAsyncThunk","deck","a","sdk","getItems","fields","filter","eq","data","map","srcUri","image","full_url","fetchDecks","apiSlice","decks","cards","removeCards","removeAll","extraReducers","builder","addCase","pending","isPending","fulfilled","hasSucceeded","upsertMany","rejected","hasFailed","error","message","value","getSelectors","api","selectAllCards","selectAll","selectCardById","selectById","selectCardIds","selectIds","selectCardEntities","selectEntities","gameSlice","setDeck","setPlayerCard","playerCard","setPlayerName","replace","playerName","setOpponentCode","opponentCode","setOpponentCard","opponentCard","setOppCardError","oppCardError","unSetOpponentAndGameCards","undefined","gameCards","setGameCards","setIsPlaying","isPlaying","shuffle","array","i","length","j","Math","floor","random","notEmpty","persistConfig","key","storage","persistedReducer","persistReducer","combineReducers","game","gameReducer","settings","settingsReducer","apiReducer","store","configureStore","reducer","persistor","persistStore","root","NumberInput","props","label","onSubmit","min","max","React","useState","val","setVal","css","className","htmlFor","type","onKeyUp","e","keyCode","onInput","v","parseInt","target","overlay","Modal","title","icon","size","onClick","onClose","children","footer","Checkbox","onToggle","toggle","color","modalContent","Settings","dispatch","useDispatch","useSelector","PortalWithState","closeOnEsc","closePortal","openPortal","portal","button","Button","tag","Tag","disabled","hidden","rest","Input","isValid","submitText","onChange","defaultOption","onStart","classList","remove","Default","text","description","FancySelect","items","selectedValue","element","flipKey","spring","damping","stiffness","item","selected","hasSelected","notSelected","flipId","onComplete","shouldHide","add","Element","style","order","preventDefault","mapper","cardStyle","maxWidth","CharacterCard","canFlip","defaultValue","stickyValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","useStickyState","toString","isVisible","setVisible","eliminated","onMouseEnter","buttons","onFocus","src","alt","loading","selector","Setup","hash","step","setStep","decksStatus","cardsStatus","toggleDeck","setDeckAndCards","toggleCard","steps","neededData","atLastStep","atFirstStep","canAdvance","encoder","Hashids","toLowerCase","encode","s","current","slice","every","st","d","charAt","toUpperCase","margin","code","getState","split","oppName","decode","cardDict","opponentCardCard","allWrongCardIds","wrongGameCards","cardId","DeckSelect","grid","CardGrid","onCardClick","cardElements","marginBottom","library","faCheckSquare","faTimes","faTimesCircle","faCheckCircle","faInfoCircle","faCog","faSquare","header","App","playerCardId","word","join","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a7cfd463.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export interface Card {\n  name: string;\n  srcUri: string;\n  id: number;\n}\n\nexport enum Status {\n  unFetched = \"unfetched\",\n  isPending = \"pending\",\n  hasSucceeded = \"succeded\",\n  hasFailed = \"failed\",\n}\n\nexport interface Async {\n  status: Status;\n  error?: string;\n}\n\nexport interface AsyncValue<T> extends Async {\n  value?: T;\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface SettingsSliceState {\n  numCards: number;\n  showName: boolean;\n}\n\nexport const settingsSlice = createSlice({\n  name: \"game\",\n  initialState: {\n    numCards: 24,\n    showName: true,\n  } as SettingsSliceState,\n  reducers: {\n    setNumCards: (state, action: PayloadAction<number>): void => {\n      state.numCards = action.payload;\n    },\n    setShowName: (state, action: PayloadAction<boolean>): void => {\n      state.showName = action.payload;\n    },\n  },\n});\n\nexport const { setNumCards, setShowName } = settingsSlice.actions;\n\nexport default settingsSlice.reducer;\n","import SDK from \"@directus/sdk-js\";\n\nexport default new SDK({\n  url: \"https://api.jacobrienstra.com\",\n  project: \"guesswho\",\n  mode: \"cookie\",\n});\n","/* eslint-disable no-param-reassign */\n\nimport {\n  createEntityAdapter,\n  createSlice,\n  createAsyncThunk,\n  EntityState,\n} from \"@reduxjs/toolkit\";\n\nimport { Card, Status, Async, AsyncValue } from \"../types\";\nimport type { RootState } from \"../store\";\nimport sdk from \"../sdk\";\n\n// import { RootState } from \"../store\";\ntype DeckState = AsyncValue<string[]>;\ntype CardsState = Async & EntityState<Card>;\ninterface APISliceState {\n  decks: DeckState;\n  cards: CardsState;\n}\n\nconst cardsAdapter = createEntityAdapter<Card>({\n  selectId: (card) => card.id,\n});\nexport const initialCardsState = cardsAdapter.getInitialState({\n  status: Status.unFetched,\n} as Async);\n\nexport const fetchCards = createAsyncThunk(\n  \"fetchCards\",\n  async (deck: string) => {\n    const { data } = await sdk.getItems<\n      {\n        id: number;\n        name: string;\n        image: { data: { full_url: string } };\n        deck: { name: string };\n      }[]\n    >(\"cards\", {\n      fields: [\"id\", \"name\", \"image.data.full_url\", \"deck.name\"],\n      filter: { \"deck.name\": { eq: deck } },\n    });\n    return data.map(\n      (card) =>\n        ({\n          name: card.name,\n          id: card.id,\n          srcUri: card.image.data.full_url,\n        } as Card)\n    ) as Card[];\n  }\n);\n\nexport const fetchDecks = createAsyncThunk(\"fetchDecks\", async () => {\n  const { data } = await sdk.getItems<{ name: string }[]>(\"decks\", {\n    fields: [\"name\"],\n  });\n  return data.map((deck) => deck.name);\n});\n\nconst apiSlice = createSlice({\n  name: \"api\",\n  initialState: {\n    decks: {\n      status: Status.unFetched,\n    },\n    cards: initialCardsState,\n  } as APISliceState,\n  reducers: {\n    removeCards: (state): void => {\n      cardsAdapter.removeAll(state.cards);\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchCards.pending, (state) => {\n      state.cards.status = Status.isPending;\n    });\n    builder.addCase(fetchCards.fulfilled, (state, action) => {\n      state.cards.status = Status.hasSucceeded;\n      cardsAdapter.removeAll(state.cards);\n      cardsAdapter.upsertMany(state.cards, action.payload);\n    });\n    builder.addCase(fetchCards.rejected, (state, action) => {\n      state.cards.status = Status.hasFailed;\n      state.cards.error = action.error.message;\n    });\n    builder.addCase(fetchDecks.pending, (state) => {\n      state.decks.status = Status.isPending;\n    });\n    builder.addCase(fetchDecks.fulfilled, (state, action) => {\n      state.decks.status = Status.hasSucceeded;\n      state.decks.value = action.payload;\n    });\n    builder.addCase(fetchDecks.rejected, (state, action) => {\n      state.decks.status = Status.hasFailed;\n      state.decks.error = action.error.message;\n    });\n  },\n});\n\nexport const { removeCards } = apiSlice.actions;\n\nexport const {\n  selectAll: selectAllCards,\n  selectById: selectCardById,\n  selectIds: selectCardIds,\n  selectEntities: selectCardEntities,\n} = cardsAdapter.getSelectors((state: RootState) => state.api.cards);\n\nexport default apiSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport Hashids from \"hashids\";\nimport { createSlice, PayloadAction, Dispatch } from \"@reduxjs/toolkit\";\n\nimport { Card } from \"../types\";\nimport type { RootState } from \"../store\";\n\nimport {\n  fetchCards,\n  removeCards,\n  selectCardEntities,\n  selectCardIds,\n} from \"./api\";\n\ninterface GameSliceState {\n  deck?: string;\n  playerCard?: number;\n  playerName?: string;\n  opponentCode?: string;\n  opponentCard?: number;\n  oppCardError?: string;\n  gameCards?: Card[];\n  isPlaying?: boolean;\n}\n\nexport const gameSlice = createSlice({\n  name: \"game\",\n  initialState: {} as GameSliceState,\n  reducers: {\n    setDeck: (state, action: PayloadAction<string | undefined>): void => {\n      state.deck = action.payload;\n    },\n    setPlayerCard: (state, action: PayloadAction<Card | undefined>): void => {\n      state.playerCard = action.payload?.id;\n    },\n    setPlayerName: (state, action: PayloadAction<string | undefined>): void => {\n      const value = action.payload?.replace(\"-\", \"_\");\n      state.playerName = value;\n    },\n    setOpponentCode: (\n      state,\n      action: PayloadAction<string | undefined>\n    ): void => {\n      state.opponentCode = action.payload;\n    },\n    setOpponentCard: (state, action: PayloadAction<number>): void => {\n      state.opponentCard = action.payload;\n    },\n    setOppCardError: (\n      state,\n      action: PayloadAction<string | undefined>\n    ): void => {\n      state.oppCardError = action.payload;\n    },\n    unSetOpponentAndGameCards: (state): void => {\n      state.opponentCode = undefined;\n      state.opponentCard = undefined;\n      state.gameCards = undefined;\n    },\n    setGameCards: (state, action: PayloadAction<Card[]>): void => {\n      state.gameCards = action.payload;\n    },\n    setIsPlaying: (state, action: PayloadAction<boolean>): void => {\n      state.isPlaying = action.payload;\n    },\n  },\n});\n\nexport const {\n  setDeck,\n  setPlayerCard,\n  setPlayerName,\n  unSetOpponentAndGameCards,\n  setIsPlaying,\n  setOppCardError,\n} = gameSlice.actions;\n\nconst { setOpponentCard, setOpponentCode, setGameCards } = gameSlice.actions;\n\nexport const setDeckAndCards = (deck: string) => (\n  dispatch: Dispatch<any>\n): void => {\n  dispatch(setDeck(deck));\n  if (deck != null) {\n    dispatch(fetchCards(deck));\n  } else {\n    removeCards();\n  }\n};\n\n// shuffles in place\nfunction shuffle(array: Array<any>): void {\n  for (let i = array.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n    // swap elements array[i] and array[j]\n    // we use \"destructuring assignment\" syntax to achieve that\n    // you'll find more details about that syntax in later chapters\n    // same can be written as:\n    // let t = array[i]; array[i] = array[j]; array[j] = t\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && value !== undefined;\n}\n\nexport const endGame = () => (dispatch: Dispatch<any>): void => {\n  dispatch(setDeck(undefined));\n  dispatch(setPlayerCard(undefined));\n  dispatch(setPlayerName(undefined));\n  dispatch(unSetOpponentAndGameCards());\n  dispatch(setOppCardError(undefined));\n  dispatch(setIsPlaying(false));\n};\n\nexport const setOpponentCardAndGameCardsFromHash = (code: string) => (\n  dispatch: Dispatch<any>,\n  getState: () => RootState\n): void => {\n  const state = getState();\n  const [oppName, hash] = code.split(\"-\");\n  if (!hash || !oppName) {\n    dispatch(\n      setOppCardError(\n        `Malformed opponent code. Should be: [Opponent's name]-[opponent's code]`\n      )\n    );\n    return;\n  }\n  dispatch(setOppCardError(undefined));\n  dispatch(setOpponentCode(code));\n  const decoder = new Hashids(oppName.toLowerCase());\n  const [id] = decoder.decode(hash) as number[];\n  const cardDict = selectCardEntities(state);\n  const opponentCardCard = cardDict[id];\n  if (!opponentCardCard) {\n    dispatch(\n      setOppCardError(\n        `Could not find opponent's card. Make sure you're spelling their name exactly as they entered it.`\n      )\n    );\n    return;\n  }\n  dispatch(setOppCardError(undefined));\n  dispatch(setOpponentCard(id));\n  const allWrongCardIds = selectCardIds(state).filter((i) => i !== id);\n  shuffle(allWrongCardIds);\n  const wrongGameCards = allWrongCardIds\n    .slice(0, state.settings.numCards - 1)\n    .map((cardId) => cardDict[cardId]) // Should throw error here lol\n    .filter(notEmpty);\n  const gameCards = [...wrongGameCards, opponentCardCard];\n  shuffle(gameCards);\n  dispatch(setGameCards(gameCards));\n};\n\nexport default gameSlice.reducer;\n","import storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\n\nimport { gameReducer, settingsReducer, apiReducer } from \"./reducers\";\n\nconst persistConfig = {\n  key: \"guesswho\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(\n  persistConfig,\n  combineReducers({\n    game: gameReducer,\n    settings: settingsReducer,\n    api: apiReducer,\n  })\n);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n});\n\nexport const persistor = persistStore(store);\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\n\ntype Props = {\n  name: string;\n  label: string;\n  value?: number;\n  min: number;\n  max: number;\n  onSubmit: (val: number | undefined) => void;\n};\n\nconst root = css`\n  display: flex;\n  align-items: center;\n\n  label {\n    display: flex;\n    align-items: center;\n    font-weight: 700;\n    font-size: 1.5rem;\n    input[type=\"number\"] {\n      margin: 0 1rem;\n      padding: 0.5rem;\n      font-size: 1.5rem;\n      border: 2px solid black;\n      border-radius: 4px;\n      outline: none;\n    }\n  }\n  svg {\n    margin-right: 1rem;\n  }\n`;\n\nfunction NumberInput(props: Props): JSX.Element {\n  const { name, label, value, onSubmit, min, max } = props;\n\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <div css={root} className=\"input\">\n      <label htmlFor={name}>\n        {label}\n        <input\n          name={name}\n          type=\"number\"\n          value={val}\n          min={min}\n          max={max}\n          onKeyUp={(e: React.KeyboardEvent): void => {\n            if (e.keyCode === 13) {\n              // setVal(parseInt(e.target.value, 10));\n              if (val && val >= min && val <= max) onSubmit(val);\n            }\n          }}\n          onInput={(e: React.FormEvent<HTMLInputElement>): void => {\n            const v = parseInt((e.target as HTMLInputElement).value, 10);\n            setVal(v);\n            if (v >= min && v <= max) onSubmit(v);\n          }}\n        />\n      </label>\n    </div>\n  );\n}\n\nexport default NumberInput;\n","import React, { PropsWithChildren } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { css } from \"@emotion/core\";\n\nconst overlay = css`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 201;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgb(33, 33, 33);\n  border-color: rgb(33, 33, 33);\n  border-radius: inherit;\n  opacity: 0.46;\n  transition: 0.3s cubic-bezier(0.25, 0.8, 0.5, 1), z-index 1ms;\n  will-change: opacity;\n`;\n\nconst root = css`\n  &.container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 202;\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n    outline: none;\n    transition: 0.2s cubic-bezier(0.25, 0.8, 0.25, 1) z-index 1ms;\n\n    .modal {\n      position: fixed;\n      z-index: 202;\n      display: flex;\n      flex-direction: column;\n      box-sizing: content-box;\n      width: calc(100% - 16px);\n      max-width: 90%;\n      height: calc(100% - 16px);\n      max-height: 90%;\n      margin-top: 24px;\n      overflow-y: hidden;\n      background: white;\n      border-radius: 4px;\n      box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2),\n        0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n      transform-origin: center center;\n      opacity: 1;\n      transition: 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n\n      .header {\n        display: flex;\n        flex-shrink: 0;\n        align-items: center;\n        justify-content: space-between;\n        padding: 8px 24px;\n        border-bottom: 2px solid black;\n\n        .title {\n          margin-right: 12px;\n          font-size: 32px;\n        }\n\n        .button {\n          padding: 6px 10px;\n          border-radius: 4px;\n          cursor: pointer;\n\n          &:hover {\n            color: white;\n            background-color: var(--blue);\n          }\n        }\n      }\n\n      .body {\n        position: relative;\n        display: flex;\n        flex: 1 1 auto;\n        overflow-x: hidden;\n        overflow-y: auto;\n      }\n\n      .footer {\n        display: flex;\n        flex-direction: row;\n        flex-shrink: 0;\n        align-items: center;\n        justify-content: space-between;\n        padding: 8px 24px;\n        border-top: 2px solid black;\n\n        & > *:not(:last-child) {\n          margin-right: 8px;\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  title: string;\n  footer?: React.ReactNode;\n  onClose: () => void;\n}\nfunction Modal(props: PropsWithChildren<Props>): JSX.Element | null {\n  return (\n    <>\n      <div css={overlay}>\"\"</div>\n      <div css={root} className=\"container\">\n        <div className=\"modal\">\n          <div className=\"header\">\n            <h2 className=\"title\">{props.title}</h2>\n            <FontAwesomeIcon\n              icon=\"times\"\n              size=\"lg\"\n              className=\"button\"\n              onClick={props.onClose}\n            />\n          </div>\n          <div className=\"body\">{props.children}</div>\n          {props.footer ? <div className=\"footer\">{props.footer}</div> : null}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Modal;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { css } from \"@emotion/core\";\n\ntype Props = {\n  label: string;\n  value: boolean;\n  onToggle: (val: boolean) => void;\n};\n\nconst root = css`\n  display: flex;\n  .label {\n    display: flex;\n    align-items: center;\n    font-weight: 700;\n    font-size: 1.5rem;\n  }\n  svg {\n    margin: 0 1rem;\n    cursor: pointer;\n  }\n`;\n\nfunction Checkbox(props: Props): JSX.Element {\n  const { label, value = false, onToggle } = props;\n  const [val, setVal] = React.useState<boolean>(value);\n  const toggle = (): void => {\n    setVal(!val);\n    onToggle(!val);\n  };\n  return (\n    <div css={root}>\n      <span className=\"label\">{label}</span>\n      {val ? (\n        <FontAwesomeIcon\n          icon=\"check-square\"\n          size=\"2x\"\n          color=\"var(--green)\"\n          onClick={toggle}\n        />\n      ) : (\n        <FontAwesomeIcon icon={[\"far\", \"square\"]} size=\"2x\" onClick={toggle} />\n      )}\n    </div>\n  );\n}\n\nexport default Checkbox;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { PortalWithState } from \"react-portal\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { css } from \"@emotion/core\";\n\nimport NumberInput from \"./NumberInput.react\";\nimport Modal from \"./Modal.react\";\nimport Checkbox from \"./Checkbox.react\";\n\nimport type { RootState } from \"src/redux/store\";\nimport { setNumCards, setShowName } from \"src/redux/reducers/settings\";\n\nconst root = css`\n  border-radius: 4px;\n  svg {\n    margin: 8px 0;\n    padding: 4px;\n    cursor: pointer;\n    &:hover {\n      color: white;\n      background: black;\n    }\n  }\n`;\n\nconst modalContent = css`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 16px 32px;\n\n  .numCards,\n  .showName {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n\n    .data {\n      font-weight: bold;\n      font-size: 1.2rem;\n    }\n  }\n`;\n\nfunction Settings(): JSX.Element {\n  const dispatch = useDispatch();\n  const numCards = useSelector((state: RootState) => state.settings.numCards);\n  const showName = useSelector((state: RootState) => state.settings.showName);\n\n  return (\n    <PortalWithState closeOnEsc>\n      {({ closePortal, openPortal, portal }): JSX.Element => (\n        <div css={root}>\n          <FontAwesomeIcon\n            size=\"2x\"\n            icon=\"cog\"\n            onClick={openPortal}\n            className=\"settings\"\n          />\n          {portal(\n            <Modal title=\"Settings\" onClose={closePortal}>\n              <div className=\"content\" css={modalContent}>\n                <div className=\"numCards\">\n                  <NumberInput\n                    name=\"numCards\"\n                    label=\"Number of Cards\"\n                    value={numCards}\n                    min={24}\n                    max={48}\n                    onSubmit={(val): void => {\n                      if (val) dispatch(setNumCards(val));\n                    }}\n                  />\n                  <div className=\"data\">Current Setting: {numCards}</div>\n                </div>\n                <div className=\"showName\">\n                  <Checkbox\n                    value={showName}\n                    label=\"Show Names\"\n                    onToggle={(val): void => {\n                      dispatch(setShowName(val));\n                    }}\n                  />\n                  <div className=\"data\">{showName ? \"Yeah\" : \"No\"}</div>\n                </div>\n              </div>\n            </Modal>\n          )}\n        </div>\n      )}\n    </PortalWithState>\n  );\n}\n\nexport default Settings;\n","import React, { PropsWithChildren } from \"react\";\nimport { cx } from \"emotion\";\nimport { css } from \"@emotion/core\";\n\nconst button = css`\n  display: block;\n  align-items: flex-start;\n  justify-content: center;\n  box-sizing: content-box;\n  min-width: 100px;\n  max-width: 240px;\n  margin: 8px 0;\n  padding: 16px 24px;\n  color: white;\n  font-weight: 700;\n  font-size: 1rem;\n  text-align: center;\n  background-color: var(--blue);\n  border: none;\n  border-radius: 4px;\n  outline: none;\n  cursor: pointer;\n\n  &:not(.disabled):not(.hidden):active {\n    transform: scale(0.95);\n  }\n\n  &.disabled {\n    color: black;\n    background: var(--disabled);\n    cursor: auto;\n  }\n\n  &.hidden {\n    visibility: hidden;\n  }\n`;\n\ninterface Props {\n  onClick?: (e: React.MouseEvent) => void;\n  tag?: keyof JSX.IntrinsicElements;\n  disabled?: boolean;\n  hidden?: boolean;\n  [key: string]: any;\n}\n\nfunction Button(props: PropsWithChildren<Props>): JSX.Element {\n  const {\n    tag: Tag = \"button\",\n    onClick,\n    disabled = false,\n    hidden = false,\n    ...rest\n  } = props;\n  return (\n    <Tag\n      {...rest}\n      css={button}\n      onClick={onClick}\n      className={cx({ disabled, hidden }, [\"button\"])}\n    >\n      {props.children}\n    </Tag>\n  );\n}\n\nexport default Button;\n","import React, { ChangeEvent } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { css } from \"@emotion/core\";\n\nimport Button from \"./Button.react\";\n\ntype Props = {\n  name: string;\n  label: string;\n  value?: string;\n  isValid: boolean;\n  onSubmit: (val: string | undefined) => void;\n  submitText?: string;\n};\n\nconst root = css`\n  display: flex;\n  align-items: center;\n\n  label {\n    display: flex;\n    align-items: center;\n    font-weight: 700;\n    font-size: 1.5rem;\n    input[type=\"text\"] {\n      margin: 0 1rem;\n      padding: 0.5rem;\n      font-size: 1.5rem;\n      border: 2px solid black;\n      border-radius: 4px;\n      outline: none;\n    }\n  }\n  svg {\n    margin-right: 1rem;\n  }\n`;\n\nfunction Input(props: Props): JSX.Element {\n  const {\n    name,\n    label,\n    value,\n    isValid,\n    onSubmit,\n    submitText = isValid ? \"ReSubmit\" : \"Submit\",\n  } = props;\n\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <div css={root} className=\"input\">\n      <label htmlFor={name}>\n        {label}\n        <input\n          name={name}\n          type=\"text\"\n          value={val}\n          onKeyUp={(e: React.KeyboardEvent): void => {\n            if (e.keyCode === 13) {\n              onSubmit(val);\n            }\n          }}\n          onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n            setVal(e.target.value);\n          }}\n        />\n      </label>\n      {isValid ? (\n        <FontAwesomeIcon icon=\"check-circle\" color=\"var(--green)\" size=\"2x\" />\n      ) : (\n        <FontAwesomeIcon icon=\"info-circle\" color=\"grey\" size=\"2x\" />\n      )}\n\n      <Button\n        disabled={val == null || val === \"\" || val === value}\n        onClick={(): void => onSubmit(val)}\n      >\n        {submitText}\n      </Button>\n    </div>\n  );\n}\n\nexport default Input;\n","import { Flipper, Flipped } from \"react-flip-toolkit\";\nimport React from \"react\";\nimport { cx } from \"emotion\";\nimport { css } from \"@emotion/core\";\n\nconst defaultOption = css`\n  display: flex;\n  flex: 1 1 100%;\n  align-items: center;\n  box-sizing: border-box;\n  width: 100%;\n  margin-bottom: 8px;\n  padding: 12px;\n  font-weight: 700;\n  background-color: var(--lightblue);\n  border: solid 2px transparent;\n  border-radius: 6px;\n  cursor: pointer;\n  opacity: 1;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 300ms;\n  transition-property: background-color, border-color, opacity;\n\n  &:hover {\n    border-color: var(--blue);\n  }\n\n  &.selected {\n    color: white;\n    background-color: var(--blue);\n  }\n\n  .select-option-content {\n    .description {\n      opacity: 0.6;\n    }\n  }\n`;\n\nconst root = css`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n\n  & .select-option {\n    &.selected {\n      position: relative;\n      z-index: 3;\n      max-width: none;\n    }\n\n    &.not-selected {\n      position: absolute;\n      cursor: auto;\n      opacity: 0;\n    }\n\n    &.hidden {\n      visibility: hidden;\n    }\n  }\n`;\n\nfunction onStart(e: HTMLElement): void {\n  e.classList.remove(\"hidden\");\n}\n\nfunction onComplete(shouldHide: boolean, e: HTMLElement): void {\n  if (shouldHide) e.classList.add(\"hidden\");\n}\n\ntype Item<T> = {\n  value: string | number;\n  text: string;\n  description?: string;\n} & T;\n\n// T = extra properties\ninterface Props<T> {\n  items: Item<T>[];\n  selectedValue: string | number | undefined;\n  toggle: (item: Item<T>) => void;\n  element?: React.FC<Item<T>>;\n}\n\nconst Default: React.FC<Item<{}>> = (props: Item<{}>): JSX.Element => (\n  <div css={defaultOption} {...props}>\n    <div className=\"select-option-content\">\n      <div className=\"text\">{props.text}</div>\n      <div className=\"description\">{props.description}</div>\n    </div>\n  </div>\n);\n\nfunction FancySelect<T>({\n  items,\n  selectedValue,\n  toggle,\n  element,\n}: Props<T>): JSX.Element {\n  const mapper = (\n    item: Item<T>,\n    i: number,\n    selected: boolean,\n    hasSelected: boolean,\n    notSelected: boolean\n  ): JSX.Element => {\n    const Element = element || Default;\n    return (\n      <Element\n        {...item}\n        id={item.value}\n        className={cx([\n          \"select-option\",\n          {\n            selected,\n            \"not-selected\": notSelected,\n          },\n        ])}\n        style={{ order: selected ? 0 : i + 1 }}\n        onClick={(e: Event): void => {\n          e.preventDefault();\n\n          if (!hasSelected || selected) toggle(item);\n        }}\n      />\n    );\n  };\n\n  return (\n    <Flipper\n      flipKey={selectedValue}\n      css={root}\n      spring={{ damping: 21, stiffness: 150 }}\n    >\n      {items.map((item, i) => {\n        const { value } = item;\n        const selected = value === selectedValue;\n        const hasSelected = selectedValue != null;\n        const notSelected = hasSelected && !selected;\n        return (\n          <Flipped\n            key={value}\n            flipId={value}\n            onStart={onStart}\n            onComplete={(e): void => onComplete(notSelected, e)}\n          >\n            {mapper(item, i, selected, hasSelected, notSelected)}\n          </Flipped>\n        );\n      })}\n    </Flipper>\n  );\n}\n\nexport default FancySelect;\n","import { useSelector } from \"react-redux\";\nimport React from \"react\";\nimport { cx } from \"emotion\";\nimport { css, SerializedStyles } from \"@emotion/core\";\n\nimport { Card } from \"../redux/types\";\n\nimport { RootState } from \"src/redux/store\";\n\nfunction useStickyState(\n  defaultValue: any,\n  key: string\n): [any, React.Dispatch<any>] {\n  const [value, setValue] = React.useState(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n  });\n  React.useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n\nconst cardStyle = (maxWidth: number | undefined): SerializedStyles => css`\n  z-index: 0;\n  box-sizing: border-box;\n  max-width: ${maxWidth ? `${maxWidth}px` : \"none\"};\n  margin: 0;\n  border: 2px solid transparent;\n  perspective: 40rem;\n  cursor: pointer;\n  transition: z-index 0 0.2s, border-color 0.2s;\n\n  /* flip speed goes here */\n  .flipper {\n    display: flex;\n    transform-style: preserve-3d;\n    transition: 0.2s;\n\n    /* hide back of pane during swap */\n    .front,\n    .back {\n      min-width: 100%;\n      border: 2px solid navy;\n      border-radius: 6px;\n      backface-visibility: hidden;\n    }\n\n    /* front pane, placed above back */\n    .front {\n      background: var(--lightblue);\n\n      /* transform: rotateY(180deg); */\n      .name {\n        padding-top: 4px;\n        color: black;\n        font-weight: 700;\n        font-size: 1rem;\n        text-align: center;\n        word-wrap: normal;\n      }\n      .container {\n        padding: 8px;\n        img {\n          width: 100%;\n        }\n      }\n    }\n\n    /* back, initially hidden pane */\n    .back {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: var(--blue);\n      transform: rotateX(-180deg) translate(-100%, 0);\n      .name {\n        color: white;\n        font-weight: 700;\n      }\n    }\n  }\n\n  &:hover {\n    .flipper {\n      .front,\n      .back {\n        border-color: var(--blue);\n      }\n    }\n  }\n\n  /* flip the pane when hovered */\n  &.eliminated .flipper {\n    z-index: 1;\n    transform: rotateX(-180deg);\n    transition-delay: 0s;\n  }\n`;\n\ntype Props = {\n  card: Card;\n  maxWidth?: number;\n  canFlip?: boolean;\n  onClick?: () => void;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction CharacterCard(props: Props): JSX.Element {\n  const {\n    maxWidth,\n    card,\n    onClick,\n    className,\n    style,\n    canFlip = true,\n    ...rest\n  } = props;\n  const { srcUri, name, id } = card;\n  const [isVisible, setVisible] = useStickyState(true, id.toString());\n  const showName = useSelector((state: RootState) => state.settings.showName);\n\n  const handleMouseEnter = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ): void => {\n    if (e.buttons === 1 || e.buttons === 3) {\n      if (onClick) onClick();\n      else setVisible(!isVisible);\n    }\n  };\n\n  return (\n    <div\n      css={cardStyle(maxWidth)}\n      key={id}\n      className={cx({ eliminated: canFlip && !isVisible }, [\n        \"card\",\n        \"flip-container\",\n        className,\n      ])}\n      onClick={\n        onClick ||\n        (canFlip ? (): void => setVisible(!isVisible) : (): void => {})\n      }\n      onMouseEnter={handleMouseEnter}\n      onFocus={(): void => {}}\n      style={style}\n      {...rest}\n    >\n      <div className=\"flipper\">\n        <div className=\"front\">\n          <div className=\"container\">\n            <img src={srcUri} alt={name} />\n            {showName ? <div className=\"name\">{name}</div> : null}\n          </div>\n        </div>\n        <div className=\"back\">\n          {showName ? <div className=\"name\">{name}</div> : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport ReactLoading from \"react-loading\";\nimport React from \"react\";\nimport Hashids from \"hashids\";\nimport { cx } from \"emotion\";\nimport { css } from \"@emotion/core\";\n\nimport { capitalize } from \"../util\";\n\nimport Modal from \"./Modal.react\";\nimport Input from \"./Input.react\";\nimport FancySelect from \"./FancySelect.react\";\nimport CharacterCard from \"./CharacterCard.react\";\nimport Button from \"./Button.react\";\n\nimport { Status, Card } from \"src/redux/types\";\nimport { RootState } from \"src/redux/store\";\nimport {\n  setDeckAndCards,\n  setDeck,\n  setPlayerCard,\n  setPlayerName,\n  setOpponentCardAndGameCardsFromHash,\n  setIsPlaying,\n} from \"src/redux/reducers/game\";\nimport { fetchDecks, selectAllCards } from \"src/redux/reducers/api\";\n\nconst loading = css`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst selector = css`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n\n  .sidebar {\n    display: flex;\n    flex: 0 0 auto;\n    flex-direction: column;\n    padding: 16px;\n    border-right: 2px solid black;\n\n    .step {\n      padding: 8px 16px;\n      font-weight: 700;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .current {\n      color: white;\n      background: var(--blue);\n    }\n  }\n\n  .content {\n    display: flex;\n    flex: 3 1 auto;\n    flex-direction: column;\n    padding: 16px;\n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n`;\ninterface Props {\n  onClose: () => void;\n}\n\nfunction Setup(props: Props): JSX.Element {\n  const [step, setStep] = React.useState<number>(0);\n  const dispatch = useDispatch();\n  const decks = useSelector((state: RootState) => state.api.decks.value);\n  const decksStatus = useSelector((state: RootState) => state.api.decks.status);\n  const cardsStatus = useSelector((state: RootState) => state.api.cards.status);\n  const cards = useSelector((state: RootState) => selectAllCards(state));\n  const playerCard = useSelector((state: RootState) => state.game.playerCard);\n  const deck = useSelector((state: RootState) => state.game.deck);\n  const playerName = useSelector((state: RootState) => state.game.playerName);\n  const opponentCode = useSelector(\n    (state: RootState) => state.game.opponentCode\n  );\n  const oppCardError = useSelector(\n    (state: RootState) => state.game.oppCardError\n  );\n  const opponentCard = useSelector(\n    (state: RootState) => state.game.opponentCard\n  );\n  const gameCards = useSelector((state: RootState) => state.game.gameCards);\n\n  const toggleDeck = (value: string): void => {\n    if (deck === value) {\n      dispatch(setDeck(undefined));\n    } else {\n      dispatch(setDeckAndCards(value));\n    }\n  };\n\n  const toggleCard = (card: Card): void => {\n    if (playerCard === card.id) {\n      dispatch(setPlayerCard(undefined));\n    } else {\n      dispatch(setPlayerCard(card));\n    }\n  };\n\n  interface Step {\n    name: string;\n    neededData: any;\n  }\n\n  const steps: Step[] = [\n    { name: \"Choose Deck\", neededData: deck },\n    { name: \"Choose Card\", neededData: playerCard },\n    { name: \"Choose Opponent\", neededData: opponentCard },\n  ];\n  const atLastStep = step === steps.length - 1;\n  const atFirstStep = step === 0;\n  const canAdvance = !atLastStep && steps[step].neededData != null;\n  const nextStep = (): void => {\n    if (canAdvance) {\n      setStep(step + 1);\n    }\n  };\n\n  const prevStep = (): void => {\n    if (!atFirstStep) {\n      setStep(step - 1);\n    }\n  };\n\n  React.useEffect(() => {\n    if (decksStatus === Status.unFetched) {\n      dispatch(fetchDecks());\n    }\n  }, [decksStatus, dispatch]);\n\n  let hash;\n\n  if (playerName != null && playerName !== \"\" && playerCard) {\n    const encoder = new Hashids(playerName);\n    hash = `${playerName.toLowerCase()}-${encoder.encode(playerCard)}`;\n  }\n\n  return (\n    <Modal\n      title=\"Setup\"\n      onClose={props.onClose}\n      footer={\n        <>\n          <Button onClick={prevStep} disabled={atFirstStep}>\n            Back\n          </Button>\n          <Button onClick={nextStep} disabled={atLastStep || !canAdvance}>\n            Next\n          </Button>\n        </>\n      }\n    >\n      <div css={selector}>\n        <div className=\"sidebar\">\n          {steps.map((s, i) => (\n            <div\n              key={s.name}\n              className={cx([\"step\", { current: step === i }])}\n              onClick={(): void => {\n                if (steps.slice(0, i).every((st) => st.neededData != null))\n                  setStep(i);\n              }}\n            >\n              {s.name}\n            </div>\n          ))}\n        </div>\n        <div className=\"content\">\n          {((): JSX.Element | null => {\n            switch (step) {\n              case 0: {\n                if (decksStatus === Status.isPending) {\n                  return (\n                    <div css={loading}>\n                      <ReactLoading type=\"spin\" color=\"var(--blue)\" />\n                    </div>\n                  );\n                }\n                if (decksStatus === Status.hasSucceeded && decks) {\n                  return (\n                    <FancySelect\n                      items={decks.map((d) => {\n                        return {\n                          value: d,\n                          text: capitalize(d),\n                        };\n                      })}\n                      selectedValue={deck}\n                      toggle={(item): void => {\n                        toggleDeck(item.value);\n                      }}\n                    />\n                  );\n                }\n                break;\n              }\n              case 1: {\n                if (cardsStatus === Status.isPending && cards) {\n                  return (\n                    <div css={loading}>\n                      <ReactLoading type=\"spin\" color=\"var(--blue)\" />\n                    </div>\n                  );\n                }\n                if (cardsStatus === Status.hasSucceeded && cards) {\n                  return (\n                    <FancySelect\n                      items={cards.map((card) => {\n                        return { ...card, value: card.id, text: card.name };\n                      })}\n                      selectedValue={playerCard}\n                      toggle={toggleCard}\n                      element={(item): JSX.Element => (\n                        <CharacterCard\n                          maxWidth={100}\n                          style={{ margin: \"8px\" }}\n                          canFlip={false}\n                          card={{ ...item }}\n                          {...item}\n                        />\n                      )}\n                    />\n                  );\n                }\n                break;\n              }\n              case 2: {\n                return (\n                  <div\n                    css={css`\n                      display: flex;\n                      flex-direction: column;\n                      user-select: text;\n                    `}\n                  >\n                    <Input\n                      name=\"playerName\"\n                      label=\"Your Name\"\n                      value={playerName}\n                      isValid={playerName != null && playerName !== \"\"}\n                      onSubmit={(val): void => {\n                        dispatch(setPlayerName(val));\n                      }}\n                    />\n                    <div\n                      css={css`\n                        margin-bottom: 1rem;\n                        color: var(--blue);\n                        font-weight: 700;\n                        font-size: 1.2rem;\n                        text-indent: 2rem;\n                        visibility: ${hash != null ? \"visible\" : \"hidden\"};\n                      `}\n                    >\n                      Your Code: {hash}\n                    </div>\n                    <Input\n                      name=\"opponentCode\"\n                      label=\"Opponent's Code\"\n                      value={opponentCode}\n                      isValid={\n                        opponentCode != null &&\n                        opponentCard != null &&\n                        oppCardError == null\n                      }\n                      onSubmit={(val): void => {\n                        if (val)\n                          dispatch(setOpponentCardAndGameCardsFromHash(val));\n                      }}\n                    />\n                    <div\n                      css={css`\n                        margin-bottom: 1rem;\n                        color: var(--blue);\n                        font-weight: 700;\n                        font-size: 1.2rem;\n                        text-indent: 2rem;\n                        visibility: ${oppCardError == null &&\n                        opponentCode != null\n                          ? \"visible\"\n                          : \"hidden\"};\n                      `}\n                    >\n                      Opponent Code: {opponentCode}\n                    </div>\n\n                    <div\n                      css={css`\n                        margin-bottom: 1rem;\n                        color: var(--red);\n                        font-weight: 700;\n                        font-size: 1.2rem;\n                        visibility: ${oppCardError != null\n                          ? \"visible\"\n                          : \"hidden\"};\n                      `}\n                    >\n                      Error: {oppCardError}\n                    </div>\n\n                    {opponentCard && oppCardError == null && gameCards ? (\n                      <Button\n                        onClick={(): void => {\n                          dispatch(setIsPlaying(true));\n                          props.onClose();\n                        }}\n                      >\n                        Start Game!\n                      </Button>\n                    ) : null}\n                  </div>\n                );\n              }\n              default: {\n                return null;\n              }\n            }\n            return null;\n          })()}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default Setup;\n","export function nameCase(s: string): string {\n  return s\n    .split(\" \")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n}\n\nexport function capitalize(s: string): string {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport function getFileName(f: string): string {\n  const parts = f.split(\"/\");\n  if (parts) {\n    const last = parts.pop();\n    if (last) return last.split(\".\")[0];\n  }\n  return f.split(\".\")[0];\n}\n","import { PortalWithState } from \"react-portal\";\nimport React from \"react\";\nimport { css } from \"@emotion/core\";\n\nimport Setup from \"./Setup.react\";\nimport Button from \"./Button.react\";\n\nconst root = css`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\n// const props = { webkitdirectory: \"\", directory: \"\" };\n\n// const handleInput = async (\n//   event: ChangeEvent<HTMLInputElement>\n// ): Promise<void> => {\n//   event.preventDefault();\n// };\n\nfunction DeckSelect(): JSX.Element {\n  return (\n    <PortalWithState closeOnEsc>\n      {({ closePortal, openPortal, portal }): JSX.Element => (\n        <div css={root}>\n          <Button onClick={openPortal}>Game Setup</Button>\n          {portal(<Setup onClose={closePortal} />)}\n        </div>\n      )}\n    </PortalWithState>\n  );\n}\n\nexport default DeckSelect;\n\n{\n  /* <label htmlFor=\"showNames\">\n        Show Names\n        <input\n          name=\"showNames\"\n          type=\"checkbox\"\n          checked={props.settings.showNames}\n          onChange={(e) => {\n            dispatch({ type: SET_SHOW_NAMES, showNames: e.target.checked });\n          }}\n        />\n        <label htmlFor=\"numCards\">\n          Number of Cards\n          <input\n            name=\"numCards\"\n            type=\"number\"\n            min=\"24\"\n            max=\"60\"\n            step=\"1\"\n            value={props.settings.numCards}\n            onChange={(e) => {\n              dispatch({\n                type: SET_NUM_CARDS,\n                numCards: parseInt(e.target.value, 10),\n              });\n            }}\n          />\n        </label>\n      </label> */\n  /* <Button tag=\"label\" html=For=\"directory\">\n        Upload New Deck\n        <input\n          css={input}\n          name=\"directory\"\n          id=\"directory\"\n          type=\"file\"\n          onChange={handleInput}\n          {...props}\n        />\n      </Button>  */\n}\n","import Masonry from \"react-masonry-css\";\nimport React from \"react\";\nimport { css } from \"@emotion/core\";\n\nimport { Card } from \"../redux/types\";\n\nimport CharacterCard from \"./CharacterCard.react\";\n\nconst grid = css`\n  /* display: grid;\n  flex-direction: row;\n  flex-wrap: wrap;\n  grid-auto-rows: 200px;\n  grid-gap: 8px;\n  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\n  align-content: flex-start;\n  justify-content: center;\n  width: 100%; */\n  display: flex;\n  margin-left: -16px;\n\n  .card-grid-column {\n    width: 100%;\n    padding-left: 16px; /* gutter size */\n    background-clip: padding-box;\n  }\n`;\n\ninterface Props {\n  cards: Card[];\n  maxWidth?: number;\n  onCardClick?: (card: Card) => void;\n}\n\nexport default function CardGrid(props: Props): JSX.Element {\n  const { cards, maxWidth, onCardClick } = props;\n  const cardElements = cards.map(\n    (card: Card): JSX.Element => (\n      <CharacterCard\n        key={card.id}\n        card={card}\n        className=\"card\"\n        style={{ marginBottom: \"8px\" }}\n        maxWidth={maxWidth}\n        onClick={onCardClick ? (): void => onCardClick(card) : undefined}\n      />\n    )\n  );\n  return (\n    // <Masonry\n    //   css={grid}\n    //   className=\"card-grid\"\n    //   columnClassName=\"card-grid-column\"\n    //   breakpointCols={4}\n    // >\n    <div css={grid}>{cardElements}</div>\n    // </Masonry>\n  );\n}\n","import { useSelector, useDispatch } from \"react-redux\";\nimport React from \"react\";\nimport {\n  faCheckSquare,\n  faTimes,\n  faTimesCircle,\n  faCheckCircle,\n  faInfoCircle,\n  faCog,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSquare } from \"@fortawesome/free-regular-svg-icons\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { css } from \"@emotion/core\";\n\nimport { nameCase } from \"./util\";\nimport type { RootState } from \"./redux/store\";\nimport { endGame } from \"./redux/reducers/game\";\nimport { selectCardById } from \"./redux/reducers/api\";\nimport Settings from \"./components/Settings.react\";\nimport DeckSelect from \"./components/DeckSelect.react\";\nimport CharacterCard from \"./components/CharacterCard.react\";\nimport CardGrid from \"./components/CardGrid.react\";\nimport Button from \"./components/Button.react\";\n\nlibrary.add(\n  faCheckSquare,\n  faTimes,\n  faTimesCircle,\n  faCheckCircle,\n  faInfoCircle,\n  faCog,\n  faSquare\n);\n\nconst root = css`\n  display: block;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 16px;\n  text-align: center;\n`;\n\nconst header = css`\n  display: flex;\n  flex-direction: column;\n\n  .level2 {\n    display: flex;\n    justify-content: center;\n  }\n\n  .cardLabel {\n    margin-bottom: 8px;\n    color: var(--green);\n    font-weight: bold;\n    font-size: 2.5rem;\n  }\n\n  .level1 {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    .info {\n      display: flex;\n      flex: 1 1 25%;\n      justify-content: flex-end;\n    }\n\n    .buttonHolder {\n      display: flex;\n      flex: 1 1 25%;\n      align-items: center;\n      .settings {\n        margin-right: 1rem;\n      }\n    }\n    .title {\n      flex: 1 1 50%;\n      font-size: 64px;\n      font-family: \"Modak\", cursive;\n      line-height: 1em;\n      text-align: center;\n      vertical-align: middle;\n    }\n  }\n\n  .opponent {\n    font-weight: bold;\n    font-size: 2rem;\n    .name {\n      color: var(--red);\n    }\n  }\n`;\n\nfunction App(): JSX.Element {\n  const dispatch = useDispatch();\n  const gameCards = useSelector((state: RootState) => state.game.gameCards);\n  const opponentCode = useSelector(\n    (state: RootState) => state.game.opponentCode\n  );\n  const playerCardId = useSelector((state: RootState) => state.game.playerCard);\n  const playerCard = useSelector((state: RootState) =>\n    selectCardById(state, playerCardId || \"-1\")\n  );\n\n  const isPlaying = useSelector((state: RootState) => state.game.isPlaying);\n\n  return (\n    <>\n      <div css={root}>\n        <div css={header}>\n          <div className=\"level1\">\n            <div className=\"buttonHolder\">\n              <Settings />\n              <Button\n                onClick={(): void => {\n                  dispatch(endGame());\n                }}\n                hidden={!isPlaying}\n              >\n                End Game\n              </Button>\n            </div>\n            <div className=\"title\">GUESS WHO?!</div>\n            <div className=\"info opponent\">\n              {opponentCode && isPlaying ? (\n                <>\n                  Opponent:\n                  <span className=\"name\">\n                    &nbsp;\n                    {nameCase(opponentCode.split(\"-\")[0])}\n                  </span>\n                </>\n              ) : null}\n            </div>\n          </div>\n          <div className=\"level2\">\n            <div className=\"info\">\n              {playerCard && isPlaying ? (\n                <>\n                  <div className=\"cardLabel\">Your card:</div>\n                  <CharacterCard\n                    maxWidth={300}\n                    card={playerCard}\n                    canFlip={false}\n                  />\n                </>\n              ) : null}\n            </div>\n          </div>\n        </div>\n        <DeckSelect />\n        {gameCards && isPlaying ? <CardGrid cards={gameCards} /> : null}\n      </div>\n      <div id=\"portal-root\" />\n    </>\n  );\n}\n\nexport default App;\n","import { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport \"./styles/theme.css\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store, { persistor } from \"./redux/store\";\nimport App from \"./App.react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}